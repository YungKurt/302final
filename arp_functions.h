/**
 * NWEN302 Lab 1
 * List of functions that you can use in your implementation.
 * Do not edit this file. 
 *
 * Please report bugs to the author.
 *
 * Copyright (C) 2021 by Alvin Valera <alvin.valera@vuw.ac.nz>
 * All rights reserved.
 */


#ifndef __ARP_FUNCTIONS_H__
#define __ARP_FUNCTIONS_H__ 

#include <stdint.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <linux/if_ether.h>

/**
 * ARP payload for IPv4 and Ethernet networks
 */
struct arpdata {
    unsigned char ar_sha[ETH_ALEN];   /* Sender hardware address.  */
    uint32_t ar_sip;                  /* Sender IP address.  */
    unsigned char ar_tha[ETH_ALEN];   /* Target hardware address.  */
    uint32_t ar_tip;                  /* Target IP address.  */
} __attribute__((__packed__));

/**
 * Insert an entry in the ARP cache.
 * 
 * @param ip_address IPv4 address
 * @param mac_address MAC address of the interface with @ip_address.
 * This should be a 48-bit MAC address.
 */ 
void arp_insert_cache(uint32_t ip_address, const unsigned char *mac_address);

/**
 * Delete an entry in the ARP cache
 * 
 * @param ip_address IPv4 address
 */ 
void arp_delete_cache(uint32_t ip_address);

/**
 * Send an ARP query. When you use/call this function, make sure
 * you are providing the correct input parameters
 * 
 * @param ip_address IPv4 address to be resolved
 * @param dest_mac_address Destination MAC address to send to. This 
 * should be a 48-bit MAC address.
 *
 * @return 0 if successful, < 0 otherwise. 
 */ 
int arp_send_query(uint32_t ip_address, const unsigned char *dest_mac_address);

/**
 * Send an ARP reply. When you use/call this function, make sure
 * the Ethernet frame is formed correctly
 * 
 * @param eth_frame Raw Ethernet frame to be transmitted.
 * @param len Length of the entire Ethernet frame.
 *
 * @return 0 if successful, < 0 otherwise. 
 */ 
int arp_send_reply(char *eth_frame, int len);

/**
 * Get this nodes IP address
 * 
 * @return IPv4 address of this node.
 */ 
uint32_t arp_get_my_ipaddr();

/** 
 * Get the 48-bit MAC address of this node.
 * 
 * @param buffer Buffer to store the MAC address (should be at least 6 bytes!)
 */
void arp_get_my_macaddr(unsigned char *buffer);


#endif /* __ARP_FUNCTIONS_H__ */
